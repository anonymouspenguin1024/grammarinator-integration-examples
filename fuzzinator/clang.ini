# Copyright (c) 2024 Renata Hodovan, Akos Kiss.
#
# Licensed under the BSD 3-Clause License
# <LICENSE.rst or https://opensource.org/licenses/BSD-3-Clause>.
# This file may not be copied, modified, or distributed except
# according to those terms.

#######################
#     Clang     #
#######################

[sut.clang]
# Call job settings.
call=fuzzinator.call.SubprocessCall
;call=fuzzinator.call.TestRunnerSubprocessCall
; call.decorate(1)=fuzzinator.call.ExitCodeFilter
; call.decorate(2)=fuzzinator.call.SanitizerAutomatonFilter
; call.decorate(3)=fuzzinator.call.SanitizerAnalyzerDecorator
call.decorate(4)=fuzzinator.call.UniqueIdDecorator
# Call FileReaderDecorator after the test execution and read the file
# content into memory/issue database.
call.decorate(11)=fuzzinator.call.FileReaderDecorator
# EZ added: if exit code is 0 (valid test) 
# TODO: add it to the corpus
call.decorate(12)=fuzzinator.call.ExitCodeFilter

# Validate job settings.
validate_call=${call}
; validate_call.decorate(1)=${call.decorate(1)}
; validate_call.decorate(2)=${call.decorate(2)}
; validate_call.decorate(3)=${call.decorate(3)}
validate_call.decorate(4)=${call.decorate(4)}
# Call FileWriterDecorator before executing the test to write the
# test content from memory/issue database to file.
validate_call.decorate(5)=fuzzinator.call.FileWriterDecorator
# Define how to display the issue in the issue tracker of Fuzzinator.
; formatter=fuzzinator.formatter.JinjaFormatter
; formatter.decorate(0)=fuzzinator.formatter.DecoderDecorator
; wui_formatter=fuzzinator.formatter.JinjaFormatter
; wui_formatter.decorate(0)=fuzzinator.formatter.DecoderDecorator
; wui_formatter.decorate(1)=fuzzinator.formatter.MarkdownDecorator
# Define custom issue exporter.
; exporter=fuzzinator.exporter.TestExporter

[sut.clang.call]
cwd=/tmp

; TODO: use this command
; clang -c -emit-llvm -fpermissive -Wno-everything -ferror-limit=1 -Xclang -disable-O0-optnone -O0 seed_800008.c -o - |  opt -S -passes=gvn --stats
command=/usr/bin/clang {test}
timeout=3
# this tells subprocess_call to not check the exit code of the process
# otherwise if exit code is 0 (validty test) it would return a nonissue
no_exit_code=True
env={"ASAN_OPTIONS": "handle_abort=1:symbolize=true:allow_addr2line=true:abort_on_error=true:detect_stack_use_after_return=1:check_initialization_order=true:strict_init_order=true:exitcode=199"}
;end_texts=["jerry>"]

# ExitCodeFilter
# Jerry error codes and signals:
# * https://github.com/jerryscript-project/jerryscript/blob/master/jerry-core/include/jerryscript-port.h
# * http://man7.org/linux/man-pages/man7/signal.7.html
; [sut.jerryscript.call.decorate(1)]
; exit_codes=[-11, -8, -6, -4, 13, 120, 132, 134, 136, 139, 199]

# SanitizerAutomatonFilter
# Jerry error messages:
# * Jerry asserts: https://github.com/jerryscript-project/jerryscript/blob/master/jerry-core/jrt/jrt-fatals.c
# * Jerry libc assert: https://github.com/jerryscript-project/jerryscript/blob/master/jerry-libc/include/assert.h
# glibc assert: https://sourceware.org/git/?p=glibc.git;a=blob;f=assert/assert.c
; [sut.jerryscript.call.decorate(2)]
; stderr=["mct /ERR_REF_COUNT_LIMIT/",
;         "mns /jerry_fatal|jerry_port_fatal|jerry_assert_fail|__kernel_vsyscall|__GI_\\w|linux-gate.so/",
;         "mas /ICE: (?P<error_type>Assertion) '(?P<condition>[^']+)' failed at (?P<file>[^(]+)[(](?P<function>[^)]+)[)]:(?P<line>\\d+)/",
;         "mas /ICE: (?P<error_type>Unreachable control path) at (?P<file>[^(]+)[(](?P<function>[^)]+)[)]:(?P<line>\\d+)/",
;         "mas /(?P<file>[^/:]+):(?P<line>\\d+): (?P<function>[^:]+): (?P<error_type>Assertion) [`](?P<condition>[^']+)['] failed/",
;         "mas /(?P<file>[^/:]+):(?P<line>\\d+): (?P<error_type>Assertion) ['](?P<condition>[^']+)['] failed/"]
; backtrace=["mct /ERR_REF_COUNT_LIMIT/",
;            "mns /jerry_fatal|jerry_port_fatal|jerry_assert_fail|__kernel_vsyscall|__GI_\\w|linux-gate.so/",
;            "mas /\\A.*?#\\d+[ ]+0x[\\da-fA-F]+ in (?P<function>[^ ]+)\\s+[(].*?[)](\\s+at (?P<file>[^:]+):(?P<line>\\d+))?/"]

# UniqueIdDecorator
[sut.clang.call.decorate(4)]
properties=["exit_code", "stdout", "stderr"]

# ExitCodeFilter
[sut.clang.call.decorate(12)]
exit_codes=[0]


### VALIDATE ###

[sut.clang.validate_call]
cwd=${sut.clang.call:cwd}
command=${sut.clang.call:command}
timeout=${sut.clang.call:timeout}
no_exit_code=${sut.clang.call:no_exit_code}
env=${sut.clang.call:env}

# ExitCodeFilter
; [sut.clang.validate_call.decorate(1)]
; exit_codes=${sut.clang.call.decorate(1):exit_codes}

# RegexFilter
; [sut.clang.validate_call.decorate(2)]
; stderr=${sut.clang.call.decorate(2):stderr}
; backtrace=${sut.clang.call.decorate(2):backtrace}

# UniqueIdDecorator
[sut.clang.validate_call.decorate(4)]
properties=${sut.clang.call.decorate(4):properties}

# FileWriterDecorator
[sut.clang.validate_call.decorate(5)]
filename={uid}.js


### FORMATTER ###

; [sut.clang.formatter]
; short={{error_type}} {{condition}} in {{function}}
; long_file=${fuzzinator:config_root}/fuzzinator/clang-report.md

; [sut.clang.wui_formatter]
; short=${sut.clang.formatter:short}
; long_file=${sut.clang.formatter:long_file}

; [sut.clang.wui_formatter.decorate(1)]
; extensions=["extra", "codehilite", "fenced_code"]


### EXPORTER ###

; [sut.clang.exporter]
; extension=.js
; type=text/javascript
