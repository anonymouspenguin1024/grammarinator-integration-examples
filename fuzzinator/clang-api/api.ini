# Copyright (c) 2024 Renata Hodovan, Akos Kiss.
#
# Licensed under the BSD 3-Clause License
# <LICENSE.rst or https://opensource.org/licenses/BSD-3-Clause>.
# This file may not be copied, modified, or distributed except
# according to those terms.

# Example Fuzzinator setup with TargetFuzz to define a
# basic API-based approach, where Fuzzinator asks TargetFuzz
# to generate a test case and then executes it right away, and
# iterates this in a loop, but restarts the loop after a given
# number of test cases (batch size of N).

[fuzz.clang-grammarinator-api]
sut=clang
fuzzer=api.GrammarinatorAPI
batch=1000

[fuzz.clang-grammarinator-api.fuzzer]
generator=grammarinator.runtime.CGenerator
rule=compilationUnit
max_depth=200
max_tokens=300
out_format=/scratch/eric/grammarinator-integration-examples/testout/clang/{uid}/%d.c
serializer=grammarinator.runtime.c_custom_serializer
encoding=utf-8
encoding_errors=ignore
population=/scratch/eric/grammarinator/c_corpus_trees

; grammar="/scratch/eric/grammarinator/mygrammar/C.g4"
; grammar_annot="/scratch/eric/grammarinator/runtime/grammar_annots/c_grammar.py"
; generator=grammarinator.runtime.CGenerator 
; rule=compilationUnit
; corpus="/scratch/eric/grammarinator/c_corpus"
; seed_tree="scratch/eric/grammarinator/results_test/nesting/llm-seed-trees",
; population="/scratch/eric/grammarinator/results_test/nesting/corpus_trees_test"
; max_depth=300
; max_tokens=200
; out_format=${fuzzinator:work_dir}/clang/targetfuzz/{uid}/%d.c
; serializer=grammarinator.runtime.c_custom_serializer
; parser_dir="results_test/nesting/target/CM%d.c/grammars"
; antlr="/home/eric/.antlerinator/antlr-4.13.1-complete.jar"
; encoding=utf-8
; encoding_errors=ignore
; batch=1000
; population=${fuzzinator:config_root}/resources/population/
